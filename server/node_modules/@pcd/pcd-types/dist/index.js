"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ArgumentTypeName: () => ArgumentTypeName,
  isBigIntArgument: () => isBigIntArgument,
  isBooleanArgument: () => isBooleanArgument,
  isNumberArgument: () => isNumberArgument,
  isObjectArgument: () => isObjectArgument,
  isPCDArgument: () => isPCDArgument,
  isRevealListArgument: () => isRevealListArgument,
  isStringArgument: () => isStringArgument,
  isStringArrayArgument: () => isStringArrayArgument,
  isToggleListArgument: () => isToggleListArgument
});
module.exports = __toCommonJS(src_exports);

// src/pcd.ts
var ArgumentTypeName = /* @__PURE__ */ ((ArgumentTypeName2) => {
  ArgumentTypeName2["String"] = "String";
  ArgumentTypeName2["Number"] = "Number";
  ArgumentTypeName2["BigInt"] = "BigInt";
  ArgumentTypeName2["Boolean"] = "Boolean";
  ArgumentTypeName2["Object"] = "Object";
  ArgumentTypeName2["StringArray"] = "StringArray";
  ArgumentTypeName2["PCD"] = "PCD";
  ArgumentTypeName2["ToggleList"] = "ToggleList";
  ArgumentTypeName2["Unknown"] = "Unknown";
  return ArgumentTypeName2;
})(ArgumentTypeName || {});
function isStringArgument(arg) {
  return arg.argumentType === "String" /* String */;
}
function isNumberArgument(arg) {
  return arg.argumentType === "Number" /* Number */;
}
function isBigIntArgument(arg) {
  return arg.argumentType === "BigInt" /* BigInt */;
}
function isBooleanArgument(arg) {
  return arg.argumentType === "Boolean" /* Boolean */;
}
function isObjectArgument(arg) {
  return arg.argumentType === "Object" /* Object */;
}
function isStringArrayArgument(arg) {
  return arg.argumentType === "StringArray" /* StringArray */;
}
function isPCDArgument(arg) {
  return arg.argumentType === "PCD" /* PCD */;
}
function isToggleListArgument(arg) {
  return arg.argumentType === "ToggleList" /* ToggleList */ && arg.value !== void 0 && arg.value !== null && typeof arg.value === "object" && Object.values(arg.value).every((v) => typeof v === "boolean");
}
function isRevealListArgument(arg) {
  return arg.value !== void 0 && Object.keys(arg.value).every((k) => k.startsWith("reveal"));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ArgumentTypeName,
  isBigIntArgument,
  isBooleanArgument,
  isNumberArgument,
  isObjectArgument,
  isPCDArgument,
  isRevealListArgument,
  isStringArgument,
  isStringArrayArgument,
  isToggleListArgument
});
