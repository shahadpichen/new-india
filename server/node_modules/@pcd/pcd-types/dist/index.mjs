// src/pcd.ts
var ArgumentTypeName = /* @__PURE__ */ ((ArgumentTypeName2) => {
  ArgumentTypeName2["String"] = "String";
  ArgumentTypeName2["Number"] = "Number";
  ArgumentTypeName2["BigInt"] = "BigInt";
  ArgumentTypeName2["Boolean"] = "Boolean";
  ArgumentTypeName2["Object"] = "Object";
  ArgumentTypeName2["StringArray"] = "StringArray";
  ArgumentTypeName2["PCD"] = "PCD";
  ArgumentTypeName2["ToggleList"] = "ToggleList";
  ArgumentTypeName2["Unknown"] = "Unknown";
  return ArgumentTypeName2;
})(ArgumentTypeName || {});
function isStringArgument(arg) {
  return arg.argumentType === "String" /* String */;
}
function isNumberArgument(arg) {
  return arg.argumentType === "Number" /* Number */;
}
function isBigIntArgument(arg) {
  return arg.argumentType === "BigInt" /* BigInt */;
}
function isBooleanArgument(arg) {
  return arg.argumentType === "Boolean" /* Boolean */;
}
function isObjectArgument(arg) {
  return arg.argumentType === "Object" /* Object */;
}
function isStringArrayArgument(arg) {
  return arg.argumentType === "StringArray" /* StringArray */;
}
function isPCDArgument(arg) {
  return arg.argumentType === "PCD" /* PCD */;
}
function isToggleListArgument(arg) {
  return arg.argumentType === "ToggleList" /* ToggleList */ && arg.value !== void 0 && arg.value !== null && typeof arg.value === "object" && Object.values(arg.value).every((v) => typeof v === "boolean");
}
function isRevealListArgument(arg) {
  return arg.value !== void 0 && Object.keys(arg.value).every((k) => k.startsWith("reveal"));
}
export {
  ArgumentTypeName,
  isBigIntArgument,
  isBooleanArgument,
  isNumberArgument,
  isObjectArgument,
  isPCDArgument,
  isRevealListArgument,
  isStringArgument,
  isStringArrayArgument,
  isToggleListArgument
};
